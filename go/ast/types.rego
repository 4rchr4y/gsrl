package go.ast.types

invalid := "Invalid"
file := "File"
comment := "Comment"
comment_group := "CommentGroup"
ident := "Ident"
basic_lit := "BasicLit"
func_lit := "FuncLit"
composite_lit := "CompositeLit"
field := "Field"
field_list := "FieldList"
ellipsis := "Ellipsis"
bad_expr := "BadExpr"
paren_expr := "ParenExpr"
selector_expr := "SelectorExpr"
index_expr := "IndexExpr"
index_list_expr := "IndexListExpr"
slice_expr := "SliceExpr"
type_assert_expr := "TypeAssertExpr"
call_expr := "CallExpr"
star_expr := "StarExpr"
unary_expr := "UnaryExpr"
binary_expr := "BinaryExpr"
key_value_expr := "KeyValueExpr"
array_type := "ArrayType"
struct_type := "StructType"
func_type := "FuncType"
interface_type := "InterfaceType"
map_type := "MapType"
chan_type := "ChanType"
bad_stmt := "BadStmt"
decl_stmt := "DeclStmt"
empty_stmt := "EmptyStmt"
labeled_stmt := "LabeledStmt"
expr_stmt := "ExprStmt"
send_stmt := "SendStmt"
inc_dec_stmt := "IncDecStmt"
assign_stmt := "AssignStmt"
go_stmt := "GoStmt"
defer_stmt := "DeferStmt"
return_stmt := "ReturnStmt"
branch_stmt := "BranchStmt"
block_stmt := "BlockStmt"
if_stmt := "IfStmt"
case_clause := "CaseClause"
switch_stmt := "SwitchStmt"
type_switch_stmt := "TypeSwitchStmt"
comm_clause := "CommClause"
select_stmt := "SelectStmt"
for_stmt := "ForStmt"
range_stmt := "RangeStmt"
import_spec := "ImportSpec"
value_spec := "ValueSpec"
type_spec := "TypeSpec"
gen_decl := "GenDecl"
bad_decl := "BadDecl"
func_decl := "FuncDecl"